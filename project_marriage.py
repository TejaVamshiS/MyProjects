# -*- coding: utf-8 -*-
"""Project_Marriage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q4nZRNYfsXXRSehyxn6zpUFj8O0d9T88

#**Marriage**

###**source of the datasets :** https://population.un.org/MarriageData/Index.html#/maritalStatusData

###https://www.kaggle.com/data855/child-marriage

#**Libraries used**

Pandas

Matplotlib.pyplot

Numpy

OrderedDict

seaborn

Output_notebook,Show,Figure,ColumnDataSource
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import OrderedDict
import seaborn as sns
from bokeh.io import output_notebook, show
from bokeh.plotting import figure, ColumnDataSource

output_notebook()

"""#**Load the Dataset**"""

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/My Drive/data/DVdataset.csv',encoding='utf8')

data.head() #it wii give the top 5 row of the dataset

"""###**Now we are looking into the dataset,like Description,Info,Shape[No of rows and columns].**"""

print(data.describe())
print(data.info())
print(data.shape)

"""#**checking for missing values**"""

data.isnull().sum()

"""#**pre-processing the dataset**"""

df=data.drop(columns=['Non-standard_AgeGroups','Series_contains_Non-standard_AgeGroups','Including_consensual_unions','Note on Age groups','Note on Marital Status','Note on Data','Note on Country and Population','Note Other'])
df.shape #after preprocessing the dataset, the shape of the dataset is changed

df['MaritalStatus'].value_counts()

"""###As u can see  in the above categories of marital status ,there are many of kinds , so we thought only 5 as important and we plotted for them."""

martial_status=data['MaritalStatus']    #assining the Martial status data to the variable

#counting the specific variable in a column and assining to the variables

Widowed=martial_status[martial_status[:]== 'Widowed'].count()
Married=martial_status[martial_status[:]== 'Married'].count()
Divorced=martial_status[martial_status[:]== 'Divorced'].count()
Single=martial_status[martial_status[:]== 'Single'].count()
Ever_married=martial_status[martial_status[:]== 'Ever married'].count()

status1={'Widowed':Widowed,'Married':Married,'Divorced':Divorced,'Single':Single,'Ever_married':Ever_married}    #creating the dictionary where it contains the variables as keys and count of it as values
status = OrderedDict(sorted(status1.items()))  #sorting the dictonary

keys=list(status.keys())    #extracting the variables(keys) as list and storing into another variable
items=list(status.values())  #extracting the values(items)  as list and storing into another variable
print(keys)
print(items)

# Bokeh is an interactive visualization library for modern web browsers
x = ['Divorced', 'Ever_married','Married', 'Single', 'Widowed']

p = figure(plot_height = 400, plot_width = 400, x_range = x)
top = [47780, 509, 50387, 45799, 53482]
color = ['limegreen','red','skyblue','yellow','orange']

source = ColumnDataSource(dict(categories = x, top = top, color = color))
p.vbar(top = 'top', x = 'categories', width = 0.5, color = 'color',  source = source, alpha = 0.7)
show(p)

"""#**Observation**

> The data we plotted the chart tells us that there are more than 50000 cases of widowed i.e Fate as played very badly with many of them.

>And, the least (Nearer to 0) is Ever_married i.e There are less members are in the list of Ever Married

"""

DD=data.groupby('Data Source').count() #it will group the values(variables) in the column and counts it
datanames=list(DD.index)     #storing the index's in the form of list
datavalue=list(DD['Country or area']) #storing the count of values(variables) in the form of list
print(datanames)
print(datavalue)

#PieChart - A Pie Chart is a type of graph that displays data in a circular graph.
# each slice of the pie is relative to the size of that category
explode=[0.1,0.1,0.4,0.5,0.7,0.5,0.4,0.5,0.3,0.3,1.5,1,0.5,0,0.1]
plt.pie(datavalue, labels=datanames,explode=explode,shadow=True,radius=2, autopct="%0.1f%%",pctdistance=1.5,labeldistance=1.8,rotatelabels = 135, wedgeprops={'edgecolor':'pink'})
#plt.title("Data Sources where the data collected")
plt.show()

"""<pre>
  DHS_HH             =  Demographic and Health Survey, Household Data
  DHS_STATcompiler   = Demographic and Health Survey, STATcompiler
  Eurostat           = Statistical office of the European Union
  GFHS               = Gulf Family Health Survey
  GGS                = Generations and Gender Survey
  INED               = Institut National d'Études Démographiques
  IPUMS              = Integrated Public Use Microdata Series
  MICS               = Multiple Indicator Cluster Survey
  MICS_HH            = Multiple Indicator Cluster Survey, Household Data
  National statistics = National Statistics Office
  PAPCHILD           = Pan-Arab Project for Child Development Survey
  PAPFAM             = Pan-Arab Project for Family Health Survey
  RHS               = Reproductive Health Survey
  UNSD              = United Nations Statistics Division
  US Census Bureau  = United States Census Bureau

#**Observation**
> The plot which is plotted gives the information about the Data Source that the Most ( i.e 66.2% ) of data is collected from 'UNSD' ,Where as the least ( i.e  0.1% ) data is from 'PAPCHILD', 'PAPFAM', 'RHS'
"""

#boxplot - known as the box and whisker plot.
#It shows the distribution of the quantitative data that represents the comparisons between variables

countries=df['Country or area']
x = np.array(list(countries))
print("the countries names are")
print(np.unique(x))

fig, ax = plt.subplots(ncols=2, nrows=1, figsize=(15,10))

countryname=input("enter the country name from the above list for which you want to the plot")
datadf=df[df['Country or area'] == countryname][['Country or area','AgeStart','AgeEnd','Sex']]

sns.boxplot(x ='Country or area', y ='AgeStart', data = datadf, ax=ax[0],hue ='Sex').set_title('Box Plot of AgeStart of country {}'.format(countryname))
sns.boxplot(x ='Country or area', y ='AgeEnd', data = datadf, ax=ax[1],hue ='Sex').set_title('Box Plot of AgeEnd of country {}'.format(countryname))

#Hue - Grouping variable that will produce points with different colors. Can be either categorical or numeric, although color mapping will behave differently in latter case.

plt.show()

"""#**Observation**


>As we see in the above chart age start in India is from 25 for both men and women
And it is till 60 .In the age end plot  it is in range of 25-60. Both plot have outliers and this plot varies from one country to other.

> **NOTE**

> we can observe the box plot for different countries as your wish . Since we had give INDIA ,So, As per that we had written the observation for the plot
"""

cdata = pd.read_csv('/content/drive/My Drive/Child-marriage-database.csv',encoding='utf8')
cdata.head()

"""#**Dealing with Categorical features(handling missing data)**"""

# categorical features
categorical_feat = [feature for feature in cdata.columns if cdata[feature].dtypes=='O']
print('Total categorical features: ', len(categorical_feat))
print('\n',categorical_feat)

# categorical features with missing values
categorical_nan = [feature for feature in cdata.columns if cdata[feature].isna().sum()>1 and cdata[feature].dtypes=='O']
print(categorical_nan)

cdata[categorical_nan].isna().sum()

# replacing missing values in categorical features
for feature in categorical_nan:
    cdata[feature] = cdata[feature].fillna('None')

cdata[categorical_nan].isna().sum()

"""#**Dealing with Numerical features(handling missing data)**"""

# Lets first handle numerical features with nan value
numerical_nan = [feature for feature in cdata.columns if cdata[feature].isna().sum()>1 and cdata[feature].dtypes!='O']
print(numerical_nan)

cdata[numerical_nan].isna().sum()

## Replacing the numerical Missing Values

for feature in numerical_nan:
    ## We will replace by using median since there are outliers
    median_value=cdata[feature].median()

    cdata[feature].fillna(median_value,inplace=True)

cdata[numerical_nan].isnull().sum()

def plot_count(feature, title, df, size):
    f, ax = plt.subplots(1,1, figsize=(4*size,4))
    total = float(len(cdata))
    g = sns.countplot(cdata[feature], order = cdata[feature].value_counts().index[:20], palette='Set3')
    g.set_title("Number and percentage of {}".format(title))
    if(size > 2):
         ax.set_xticklabels(cdata['Country '].unique().astype(str), rotation='vertical')


    plt.show()
plot_count("Female Married by 15", "Female Married by 15", cdata,4)
plot_count("Male Married by 18", "Male Married by 18", cdata,4)

"""##**Observation:**
> As per the above chart the high percent marriages are from the country Afghanisthan (i.e more than 80 "Females Married below 15"  And more than 110 "Male Married below 18" )

>It seems the child marriages are more occured in Afganisthan
"""

fig=sns.lmplot(x='Reference year', y="Female Married by 15",data=cdata)

"""#**observation**
> In the above plot,we can see most marriages occured in 2018

 >But,At OneTime the number of marriages occured in 2015 had reached more than 30
"""

#DistPlot - A distplot plots a univariate distribution of observations.
#The distplot() function combines the matplotlib hist function with the seaborn kdeplot() and rugplot() functions.


cdata = cdata.rename(columns={'Female Married by 15':'fmarried15', 'Female Married by 18': 'fmarried18', 'Male Married by 18': 'mMarried18'})


# Distribution of different type of amount
fig , ax = plt.subplots(1,2,figsize = (12,5))

mMarried18 = cdata.mMarried18.values
fmarried18 = cdata.fmarried18.values

sns.distplot(mMarried18 , ax = ax[0] , color = 'red').set_title('Male Married by 18' , fontsize = 14)
sns.distplot(fmarried18 , ax = ax[1] , color = 'blue').set_title('Female Married by 18' , fontsize = 14)



plt.show()

"""#**Observation**

>In the left side dist plot the count 5 is the mostly repeated in all the countries where Male is married by 18

>In the right side dist plot the count 21 is the mostly repeated in all the countries where Female is married by 18

<br>


</br>

#**Conclusion**

**From the whole Project,**

<pre><b>            First thing there are less datasets of marriage and they also contain little knowledge.
            We tried our best to present the data which can be useful to get insights.
            Major child marriage occuured in Afghanistan,And
            There are cases where marriages occured at 60 also .
            So, Age doesn't matter in case of getting married.It is just a Number.
</b></pre>
"""